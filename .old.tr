
    DummyKeyValueStore should retrieve stored values
  ․ DummyKeyValueStore should retrieve stored values
    DummyObjectStore .init(type, args) should return a version ID of a newly created object
  ․ DummyObjectStore .init(type, args) should return a version ID of a newly created object
    DummyObjectStore .trans(v, p, u, EQ) -> {v, r} should return the value returned from the method corresponding to patch p
  ․ DummyObjectStore .trans(v, p, u, EQ) -> {v, r} should return the value returned from the method corresponding to patch p
    DummyObjectStore .trans(v, p, u, EQ) -> {v, r} should pass the patch and u flag as parameters to the called method
  ․ DummyObjectStore .trans(v, p, u, EQ) -> {v, r} should pass the patch and u flag as parameters to the called method
    DummyObjectStore context .init(type, args) should initialize an object with the given type and args and return its version ID
  ․ DummyObjectStore context .init(type, args) should initialize an object with the given type and args and return its version ID
    DummyObjectStore context .trans(v, p, u) -> {v,r} should transform a version and return the new version ID and result
  ․ DummyObjectStore context .trans(v, p, u) -> {v,r} should transform a version and return the new version ID and result
    DummyObjectStore context .conflict(msg) should throw an exception with .isConflict set to true
  ․ DummyObjectStore context .conflict(msg) should throw an exception with .isConflict set to true
    DummyObjectStore context .effect(p) should add patch p to the effect queue
  ․ DummyObjectStore context .effect(p) should add patch p to the effect queue
    DummyObjectStore context .effect(p) should add patches to the effect set even when called from a nested transformation
  ․ DummyObjectStore context .effect(p) should add patches to the effect set even when called from a nested transformation
    ObjectDispatcher .init(type, args) should return an instance of the referenced type, after calling the init() function associated with the type
  ․ ObjectDispatcher .init(type, args) should return an instance of the referenced type, after calling the init() function associated with the type
    ObjectDispatcher .apply(ctx, obj, patch, unapply) should call a method corresponding to patch._type
  ․ ObjectDispatcher .apply(ctx, obj, patch, unapply) should call a method corresponding to patch._type
    ObjectMonitor .proxy() should allow modifying an object through a proxy
  ․ ObjectMonitor .proxy() should allow modifying an object through a proxy
    ObjectMonitor .proxy() should wrap objects (including arrays) with map proxies
  ․ ObjectMonitor .proxy() should wrap objects (including arrays) with map proxies
    ObjectMonitor .proxy() should provide access to child object fields via get/put methods, that update the dirty flag
  ․ ObjectMonitor .proxy() should provide access to child object fields via get/put methods, that update the dirty flag
    ObjectMonitor .proxy() should retain the original object as a simple, JSON-style object
  ․ ObjectMonitor .proxy() should retain the original object as a simple, JSON-style object
    ObjectMonitor .proxy() should use map proxies recursively
  ․ ObjectMonitor .proxy() should use map proxies recursively
    ObjectMonitor .proxy() should return an unextensible proxy object
  ․ ObjectMonitor .proxy() should return an unextensible proxy object
    ObjectMonitor .proxy() should not provide a map proxy for frozen objects
  ․ ObjectMonitor .proxy() should not provide a map proxy for frozen objects
    ObjectMonitor .proxy() should not provide a map proxy for frozen nested objects
  ․ ObjectMonitor .proxy() should not provide a map proxy for frozen nested objects
    ObjectMonitor .isDirty() should indicate if a change to the object has been made since the last time it has been called
  ․ ObjectMonitor .isDirty() should indicate if a change to the object has been made since the last time it has been called
    ObjectMonitor .hash() should return a unique string representing the content of the object
  ․ ObjectMonitor .hash() should return a unique string representing the content of the object
    ObjectMonitor .hash() should work regardless of dirty testing
  ․ ObjectMonitor .hash() should work regardless of dirty testing
    ObjectMonitor .seal(obj) [static] should make the given object unmodifiable
  ․ ObjectMonitor .seal(obj) [static] should make the given object unmodifiable
    ObjectMonitor .seal(obj) [static] should place the object's hash as the $ property of the object
  ․ ObjectMonitor .seal(obj) [static] should place the object's hash as the $ property of the object
    ObjectMonitor .revision() should return the object's revision number, one that icrements with each change
  ․ ObjectMonitor .revision() should return the object's revision number, one that icrements with each change
    SimpleObjectStore .init(type, args) should return a version ID of a newly created object
  ․ SimpleObjectStore .init(type, args) should return a version ID of a newly created object
    SimpleObjectStore .trans(v, p, u, EQ) -> {v, r} should return the value returned from the method corresponding to patch p
  ․ SimpleObjectStore .trans(v, p, u, EQ) -> {v, r} should return the value returned from the method corresponding to patch p
    SimpleObjectStore .trans(v, p, u, EQ) -> {v, r} should pass the patch and u flag as parameters to the called method
  ․ SimpleObjectStore .trans(v, p, u, EQ) -> {v, r} should pass the patch and u flag as parameters to the called method
    SimpleObjectStore context .init(type, args) should initialize an object with the given type and args and return its version ID
  ․ SimpleObjectStore context .init(type, args) should initialize an object with the given type and args and return its version ID
    SimpleObjectStore context .trans(v, p, u) -> {v,r} should transform a version and return the new version ID and result
  ․ SimpleObjectStore context .trans(v, p, u) -> {v,r} should transform a version and return the new version ID and result
    SimpleObjectStore context .conflict(msg) should throw an exception with .isConflict set to true
  ․ SimpleObjectStore context .conflict(msg) should throw an exception with .isConflict set to true
    SimpleObjectStore context .effect(p) should add patch p to the effect queue
  ․ SimpleObjectStore context .effect(p) should add patch p to the effect queue
    SimpleObjectStore context .effect(p) should add patches to the effect set even when called from a nested transformation
  ․ SimpleObjectStore context .effect(p) should add patches to the effect set even when called from a nested transformation
    SimpleQueue should retrieve elements in the same order they were entered
  ․ SimpleQueue should retrieve elements in the same order they were entered

  34 passing (48ms)

